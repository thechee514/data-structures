// Vincent Chee - Lab 1/* Class to analyze simulated purchase trends from a department store. *  */public class Analyzer{    /* declares four local variables, initializes them and prints them on the    screen */    public void numberCruncher()    {	int polygonPerim = 14;	double totalSavings = 3400.59;	char subwayLine = 'E'; 	boolean married = false;	System.out.println("Perimeter of polygon is " + polygonPerim + ".");	System.out.println("You have $" + totalSavings + " in your savings account.");	System.out.println("Please take Subway Line " + subwayLine + ".");	System.out.println("Am I married? " + married + ".");    }    /*Analyzes first three purchases of day, if all three are above max, it was a great morning, if any were    not then it was a bad morning. */    public void purchaseAnalyzer(double[] purchase, double min, double max)    {	if (purchase[0] > max && purchase[1] > max && purchase[2] > max) 	{	    System.out.println("We've had a great morning.");	    System.out.println(purchase[0]);	    System.out.println(purchase[1]);	    System.out.println(purchase[2]);	} else {	    System.out.println("We've had a bad morning.");	        }    }       public void inDepthAnalyzer(double[] purchase, double min, double max)    {	int count = 0;	int badCount = 0;	int item = 0;	/* Finds and prints first good purchase of the day, 	prints amount and place in array*/		/*while (item < 10) {	    if (purchase[item] > max) {		System.out.println(purchase[item] + " " + item);		item=10;		} else {	    item ++;	        }	    }*/	/* Finds number of good (over max) and bad (under min) purchases as 	well as good purchases before first bad one */	while (item < 10) {	    if (purchase[item] > max || purchase[item] > min) {		count++;		item++;	    } else {	      	System.out.println(item);		item=10;	    }		}	int badPurchases = 10-count;       	System.out.println("There was/were: " + count + " good purchase(s) and " + badPurchases + " bad purchase(s).");    }    /** a really dumb way of printing the entire array     *      *  purchase is a chronological collection of purchases     */    public void printer(double[] purchase)    {        System.out.println();        System.out.println("purchase[0]: " + purchase[0]);        System.out.println("purchase[1]: " + purchase[1]);        System.out.println("purchase[2]: " + purchase[2]);        System.out.println("purchase[3]: " + purchase[3]);        System.out.println("purchase[4]: " + purchase[4]);        System.out.println("purchase[5]: " + purchase[5]);        System.out.println("purchase[6]: " + purchase[6]);        System.out.println("purchase[7]: " + purchase[7]);        System.out.println("purchase[8]: " + purchase[8]);        System.out.println("purchase[9]: " + purchase[9]);    }}